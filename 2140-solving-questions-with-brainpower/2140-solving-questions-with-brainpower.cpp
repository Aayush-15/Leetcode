
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;
#define pb              push_back
#define mp              make_pair
#define pii             pair<int,int>
#define F               first
#define S               second
#define pbmax           priority_queue<int>//max heap
#define pbmin           priority_queue<int, vector<int>, greater<int>>//min heap priority_queue
#define lpi(i,a,b)      for(int i=a;i<b;i++)
#define lpd(i,a,b)      for(int i=b;i>=a;i--)
/****************************************************************************************/
#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" :"; _print(x);cerr<<'\n';
#else
#define debug(x)
#endif
void _print(int a) {cerr << a << " ";}
void _print(long long  a) {cerr << a << " ";}
void _print(char a) {cerr << a << " ";}
void _print(double a) {cerr << a << " ";}
void _print(float a) {cerr << a << " ";}
void _print(string a) { cerr << a << " ";}
template<class T> void _print(vector<T>v) {
	cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";
}
template<class T> void _print(set<T>s)
{
	cerr << "[ "; for (T i : s) {_print(i); cerr << " ";} cerr << "]";
}
template<class T> void _print(multiset<T>s)
{
	cerr << "[ "; for (T i : s) {_print(i); cerr << " ";} cerr << "]";
}
template <class T, class V> void _print(pair <T, V> pair_p) {
	cerr << "{"; _print(pair_p.first); cerr << ","; _print(pair_p.second); cerr << "}";
}
template <class T, class V> void _print(map <T, V> mp) {
	cerr << "[ "; for (auto i : mp) {_print(i); cerr << " ";} cerr << "]";
}
/****************************************************************************************/


class Solution {
public:
	long long choice(vector<vector<int>>&questions, vector< long long>&dp, int curr_index, int sz)
	{
		if (curr_index >= sz)
		{
			return 0;
		}
		if (dp[curr_index] != -1)
		{
			return dp[curr_index];
		}
		long long ans = 0;
		ans = questions[curr_index][0] + choice(questions, dp, curr_index + questions[curr_index][1] + 1, sz);
		dp[curr_index] = max(ans, choice(questions, dp, curr_index + 1, sz));
		return dp[curr_index];
	}
	long long mostPoints(vector<vector<int>>& questions)
	{
		int sz = questions.size();
		vector<long long>dp(sz, -1);
		long long ans = 0;
		choice(questions, dp, 0, sz);
		for (auto x : dp)
		{
			ans = max(ans, x);
		}
		//debug(dp);
		return ans;
	}
};
